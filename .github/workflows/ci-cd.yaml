name: Flask CI/CD Workflow

on:
  push:
    branches: [ main ]
  pull_request:

env:
  IMAGE_NAME: shivaspk/flask-gha-lab

jobs:
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    outputs:
      image-tags: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=sha
            type=ref,event=branch

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build & Cache Docker Image (Multi-Platform)
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

  test:
    name: Run Unit & Integration Tests
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest

      - name: Run Tests
        run: |
          pytest tests/

  cve-scan:
    name: CVE Scan with Snyk
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Snyk Docker Scan
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ${{ env.IMAGE_NAME }}:sha-${{ github.sha }}
          args: --severity-threshold=high

  k8s-smoke-test:
    name: Kubernetes Smoke Test
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Setup Kubeconfig
        run: |
          echo "${{ secrets.KUBECONFIG }}" | base64 -d > ~/.kube/config

      - name: Apply Deployment YAML
        run: |
          kubectl apply -f deployment.yaml
          sleep 10
          kubectl rollout status deployment/flask-app

      - name: Verify Pods
        run: |
          kubectl get pods

  comment:
    name: Comment on PR
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: [build, test, cve-scan]
    steps:
      - name: GitHub PR Comment
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'âœ… All workflows passed! Build, tests, CVE scan are complete. ðŸš€'
            })